{
  // Place your advent-of-code workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log(\"$1\");",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Solution": {
    "scope": "javascript,typescript",
    "prefix": "solution",
    "body": [
      "import * as fs from \"fs\";",
      "import { runPart } from \"../../../lib\";",
      "console.clear();",
      "",
      "const data = fs",
      "  .readFileSync(\"./input.txt\", \"utf8\")",
      "  .split(\"\\r\\n\")",
      "  .map((line) => line.split(\" \").map(Number));$0",
      "",
      "const partOne = () => 1;",
      "const partTwo = () => 2;",
      "",
      "runPart(\"One\", partOne); //",
      "runPart(\"Two\", partTwo); //"
    ],
    "description": "Solution template"
  },
  "Breadth First Search": {
    "scope": "javascript,typescript",
    "prefix": "bfs",
    "body": [
      "// Breadth First Search",
      "const NEIGHBORS = [[-1,0],[-1,-1],[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1]];",
      "",
      "const queue = [];",
      "const start = [0,0];",
      "const visited = new Hashset<[number, number]>(",
      "    (key) => key[0] + \",\" + key[1],",
      "    (hash) => hash.split(\",\").map((x) => Number(x)) as [number, number]",
      ");",
      "",
      "queue.push(start);",
      "while(queue.length > 0) {",
      "    const [x,y] = queue.shift();",
      "",
      "    if (visited.has([x,y])) {",
      "        continue;",
      "    }",
      "    visited.put([x,y]);",
      "",
      "    const neighbors = NEIGHBORS.map(([nx,ny]) => [nx + x, ny + y]);",
      "    queue.push(...neighbors);",
      "}"
    ],
    "description": "Breadth First Search"
  },
  "Depth First Search": {
    "scope": "javascript,typescript",
    "prefix": "dfs",
    "body": [
      "// Depth First Search",
      "const NEIGHBORS = [[-1,0],[-1,-1],[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1]];",
      "",
      "const stack = [];",
      "const start = [0,0];",
      "const visited = new Hashset<[number, number]>(",
      "    (key) => key[0] + \",\" + key[1],",
      "    (hash) => hash.split(\",\").map((x) => Number(x)) as [number, number]",
      ");",
      "",
      "stack.push(start);",
      "while(stack.length > 0) {",
      "    const [x,y] = stack.pop();",
      "",
      "    if (visited.has([x,y])) {",
      "        continue;",
      "    }",
      "    visited.put([x,y]);",
      "",
      "    const neighbors = NEIGHBORS.map(([nx,ny]) => [nx + x, ny + y]);",
      "    stack.push(...neighbors);",
      "}"
    ],
    "description": "Depth First Search"
  },
  "Dijkstra's Algorithm": {
    "scope": "javascript,typescript",
    "prefix": "dijkstra",
    "body": [
      "// Dijkstra's Algorithm",
      "const NEIGHBORS = [[-1,0],[-1,-1],[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1]];",
      "",
      "const pqueue = [];",
      "const start = [0,0];",
      "const visited = new Hashset<[number, number]>(",
      "    (key) => key[0] + \",\" + key[1],",
      "    (hash) => hash.split(\",\").map((x) => Number(x)) as [number, number]",
      ");",
      "",
      "pqueue.push([0 /*cost*/, start]);",
      "while(pqueue.length > 0) {",
      "    const [cost, [x,y]] = pqueue.sort(([a],[b]) => a - b).shift();",
      "",
      "    if (visited.has([x,y])) {",
      "        continue;",
      "    }",
      "    visited.put([x,y]);",
      "",
      "    const neighbors = NEIGHBORS.map(([nx,ny]) => [nx + x, ny + y]);",
      "    pqueue.push(...neighbors.map(([nx,ny]) => [cost + 1, [nx,ny]]));",
      "}"
    ],
    "description": "Dijkstra's Algorithm"
  }
}
